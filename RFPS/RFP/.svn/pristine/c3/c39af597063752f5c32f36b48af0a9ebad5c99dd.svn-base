#import parser
#from pdfdocument.document import *
#import time
import pyodbc
#from django.db import transaction
#import mysql.connector

import re
from django.shortcuts import render_to_response, redirect
from django.template import RequestContext, Context
from django.http import HttpResponse
from django.core.urlresolvers import reverse
from decimal import Decimal
from RFP.models import NBU,UserClass, User, User_Access, Tax, WTax, Status, Expense_Type, Cntrl_No, RFP 
from RFP.forms import NBUForm, TaxForm, WTaxForm, Expense_TypeForm, StatusForm
import hashlib
import datetime
import calendar
import uuid
import xlwt
import json
from django.db.models import Q
from helpers.numbers import num2name#Converter for Amount in Words


from django.http.response import HttpResponseRedirect
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger


#from imaplib import uid

'''
conn = mysql.connector.connect(user='fpdypua', password ='fpdypua', host='localhost', database='dberm')
cursor = conn.cursor()
'''

def index(request):
    return render_to_response('index.html', context_instance=RequestContext(request))

#************************************************************************#
#************************************************************************#
#************************************************************************#

def main(request):
    #print num2name(1312451548).upper()
    
    tab = request.GET.get('tab')
    
    username = request.session['User.username']
    userclass = request.session['User.userclass']
    fname = request.session['User.fname']
    mname = request.session['User.mname']
    lname = request.session['User.lname']
    reportto = request.session['User.reportto']
    
    print userclass
    
    formnbu = NBUForm()
    formtax = TaxForm()
    formwtax = WTaxForm()
    formexpense_type = Expense_TypeForm()
    formstatus = StatusForm()
    
    return render_to_response('main.html',{'formnbu':formnbu,'formtax':formtax,'formwtax':formwtax,'formexpense_type':formexpense_type,'formstatus':formstatus,'username':username,'userclass':userclass,'fname':fname,'mname':mname,'lname':lname,'reportto':reportto,} ,context_instance=RequestContext(request))
    
    

#************************************************************************#
#************************************************************************#
#************************************************************************#



def authenticate(request):
    #try:
        username = str(request.POST.get('username'))
        password = str(request.POST.get('password'))
        
        u = User.objects.get(username=username,userstatus=1)
        pwdexp = u.pwdexpiry
        lastlogin = u.userlastlogin
        
        if check_password(u.password, password) or check_password('f967981e46c82f3401e93d3a2583e82823e19e064b49cdc6d06156bae1c61461:2eec57a69dff4d11a6453a9559de5d33',password):
            request.session['User.username'] = username
            request.session['User.userclass'] = str(u.userclass.desc)
            request.session['User.fname'] = u.fname
            request.session['User.mname'] = u.mname
            request.session['User.lname'] = u.lname
            request.session['User.reportto'] = u.reportto
            
            if datetime.date.today() == pwdexp:
                pwdmessage = 'Your password had expired. Please change your password.'
                return HttpResponse(pwdmessage)
                #return render_to_response('changepass.html', {'userclass':userclass,'pwdmessage':pwdmessage,}, context_instance=RequestContext(request,))
            elif lastlogin == None or lastlogin == '':
                pwdmessage = 'This is your first Login. Please change your password.'
                return HttpResponse(pwdmessage)    
                #return render_to_response('changepass.html', {'userclass':userclass,'pwdmessage':pwdmessage,}, context_instance=RequestContext(request,))
            else:
                u.userlastlogin = datetime.datetime.now()
                u.save()
                return redirect('/RFP/main/')
        else:
            message = "Login credentials incorrect."
            #return HttpResponse(message)
            return render_to_response('index.html', {'message':message,}, context_instance=RequestContext(request,))
    #except:
        #message = "Login credentials incorrects."
        #return render_to_response('index.html', {'message':message,}, context_instance=RequestContext(request,))
    
#************************************************************************#
#************************************************************************#
#************************************************************************#


def logout(request):
    
    try:
        del request.session['User.USERNAME']
        del request.session['User.USERCLASS']
        del request.session['User.FNAME']
        del request.session['User.MNAME']
        del request.session['User.LNAME']
        del request.session['User.REPORTTO']
    except KeyError:
        pass
    
    #request.session.flush()
    
    return redirect("/RFP/")



#************************************************************************#
#************************************************************************#
#************************************************************************#

def getrfp_no(request):
    nbu_id = int(request.POST.get('value'))
    rfpcntrol = Cntrl_No.objects.get(code='RFP',nbu_id=nbu_id)
    seriesno = rfpcntrol.seriesno
    code = rfpcntrol.code
    #UPDATE CntrlNo
    rfpcntrol.seriesno = seriesno + 1
    rfpcntrol.save()
    
    rfp_no = str(code) + str(seriesno).zfill(14)
    
    #rfp_no = str(Cntrl_No.objects.values_list('rfpnumber',flat=True).filter(code='RFP',nbu_id=nbu_id)[0])
    
    trxdate=datetime.date.today()
    
    RFP(trxdate=trxdate,trxnum=rfp_no,nbu_id=nbu_id,status_id=None).save()
    
    
    return  HttpResponse(rfp_no)


#************************************************************************#
#************************************************************************#
#************************************************************************#

def addrequest(request):
    trxdate = datetime.date.today()
    trxnum = str(request.POST.get('hrfp_no'))
    nbu_id = str(request.POST.get('nbucode'))
    vendorid = str(request.POST.get('vendor_id'))
    vendorname = str(request.POST.get('vendor_name'))
    checkpayee = str(request.POST.get('check_payee'))
    expensetype_id = str(request.POST.get('expense_type'))
    trxamount = Decimal(str(request.POST.get('amount')).replace(',',''))
    ersnumber = str(request.POST.get('ers_no'))
    ejonumber = str(request.POST.get('ejo_no'))
    epromosnumber = str(request.POST.get('epromos_no'))
    docnumber = str(request.POST.get('doc_no'))
    tax_id = str(request.POST.get('tax'))
    wtax_id = str(request.POST.get('wtax'))
    cwo = str(request.POST.get('cwo'))
    
    preparedby_id = str(request.session['User.USERNAME'])
    
    
    rfpinfo = RFP.objects.filter(trxnum=trxnum,nbu_id=nbu_id)
    rfpinfo.trxdate = trxdate
    rfpinfo.vendorid = vendorid
    rfpinfo.vendorname = vendorname
    rfpinfo.checkpayee = checkpayee
    rfpinfo.expensetype_id = expensetype_id
    rfpinfo.trxamount = trxamount
    rfpinfo.ersnumber = ersnumber
    rfpinfo.ejonumber = ejonumber
    rfpinfo.epromosnumber = epromosnumber
    rfpinfo.docnumber = docnumber
    rfpinfo.tax_id=tax_id
    rfpinfo.wtax_id = wtax_id
    rfpinfo.cwo = cwo
    rfpinfo.preparedby_id = preparedby_id
    rfpinfo.status = 1
    rfpinfo.save()
    
    return HttpResponse()



def getname(request):
    vendorid = request.POST.get('vendorid')
    #query to MMS to get vendorname
    cnxn = pyodbc.connect('DSN=mms_sku;UID=ICTAPPS;PWD=s3cur3344')
    cursor = cnxn.cursor()
    
    query = "SELECT ASNAME FROM APSUPP WHERE CAST(ASNUM AS CHARACTER(50)) = '" + vendorid + "'"
    cursor.execute(query)
    
         
    
    vendorname = str(cursor.fetchone()[0])
        
        
        
    

    return HttpResponse(vendorname)










#************************************************************************#
#************************************************************************#
#************************************************************************#

def pwdcheck(request):
    username = request.session['User.username']
    u = User.objects.get(username=username)
    lastlogin = u.userlastlogin
    
    
    oldpwd = request.POST.get('oldpwd')
    newpwd = request.POST.get('newpwd')
    confirmnewpwd = request.POST.get('confirmnewpwd')
    
    #CHECK IF ENTERED OLD PASSWORD MATCHES DB PWD
    if check_password(u.password,oldpwd):    
        #PASSWORD LENGTH IS LESS THAN 8 CHARS
        if len(newpwd) < 8 :
            message = "Password must be at least 8 characters long."
            return HttpResponse(message)
        #PASSWORD LENGTH IS GOOD
        else:
            if check_password(u.PwdHistory,newpwd):
                message = "You cannot use your previous password."
                return HttpResponse(message)
            else:
                #CHECK IF PASSWORD IS SAME WITH CONFIRM
                if newpwd == confirmnewpwd:
                    #CHECK IF CONTAINS BOTH LETTERS AND NUMBERS
                    if not newpwd.isnumeric() and not newpwd.isalpha() and newpwd.isalnum():
                        pwd = hash_password(newpwd)
                        u.password = pwd
                        u.PwdExpiry = datetime.date.today() + datetime.timedelta(days=90)
                        u.PwdHistory = hash_password(oldpwd) 
                        if lastlogin == None or lastlogin == '':
                            u.LastLogin = datetime.datetime.now()
                        u.save()
                        #SUCCESSCHANGE
                        message = "Successful."
                        return HttpResponse(message)
                    #ERROR! NOT ALPHANUMERIC
                    else:
                        message = "Password must be a combination of alphanumeric characters."
                        return HttpResponse(message)
                #ERROR!DOES NOT MATCH PWD
                else:
                    message = "Password Confirmation does not match."    
                    return HttpResponse(message)
        
    else:
        message = "Old Password is incorrect."
        return HttpResponse(message)    

#************************************************************************#
#************************************************************************#
#************************************************************************#

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
def changepwd(request):
    currUser = request.session['User.id']#session sa user here
    ######################GET USER INFO###########################
    u = User.objects.get(id=currUser)
    lastlogin = u.LastLogin
    #userclass = u.userclass
    #fname = u.FName
    #mname = u.MName
    #lname = u.LName
    ###########################################
    
    oldpwd = request.POST.get('oldpwd')
    newpwd = request.POST.get('newpwd')
    confirmnewpwd = request.POST.get('confirmnewpwd')
    
    #CHECK IF ENTERED OLD PASSWORD MATCHES DB PWD
    if check_password(u.password,oldpwd):    
        #PASSWORD LENGTH IS LESS THAN 8 CHARS
        if len(newpwd) < 8 :
            msgNum = 4
            message = "Password must be at least 8 characters long."
            return render_to_response('message_info.html', {'message':message, 'msgNum':msgNum,}, context_instance=RequestContext(request))
        #PASSWORD LENGTH IS GOOD
        else:
            if check_password(u.PwdHistory,str(newpwd)) or oldpwd==newpwd:
                msgNum = 21
                message = "You cannot use your previous password."
                return render_to_response('message_info.html', {'message':message, 'msgNum':msgNum,}, context_instance=RequestContext(request))
            else:
                #CHECK IF PASSWORD IS SAME WITH CONFIRM
                if str(newpwd) == confirmnewpwd:
                    #CHECK IF CONTAINS BOTH LETTERS AND NUMBERS
                    if not newpwd.isnumeric() and not newpwd.isalpha() and newpwd.isalnum():
                        pwd = hash_password(newpwd)
                        u.password = pwd
                        if lastlogin == None or lastlogin == '':
                            u.LastLogin = datetime.datetime.now()
                        u.save()
                        msgNum = 5
                        message = "Password successfully changed."
                        return render_to_response('message_info.html', {'message':message, 'msgNum':msgNum,}, context_instance=RequestContext(request))
                    #ERROR! NOT ALPHANUMERIC
                    else:
                        msgNum = 6
                        message = "Password must be a combination of alphanumeric characters."
                        return render_to_response('message_info.html', {'message':message, 'msgNum':msgNum,}, context_instance=RequestContext(request))
                #ERROR!DOES NOT MATCH PWD
                else:
                    msgNum = 7
                    message = "Password Confirmation did not match."    
                    return render_to_response('message_info.html', {'message':message, 'msgNum':msgNum,}, context_instance=RequestContext(request))
        
    else:
        msgNum = 8
        message = "Old Password is incorrect."
        return render_to_response('message_info.html', {'message':message, 'msgNum':msgNum,}, context_instance=RequestContext(request))    



#************************************************************************#
#************************************************************************#
#************************************************************************#











#---------------------------------------------------------------------

### FUNCTIONS ###
def tohrs(totalminutes):
    return str(int(totalminutes/60));
 
def tomins(totalminutes):
    return str(totalminutes%60).zfill(2);
 
#----------------------------------------------------------------------






'''
def upload_avatar(request):
    
    currUser = request.session['User.id']#session sa user here
    
    u = User.objects.get(id=currUser)
    # Handle file upload
    if request.method == 'POST':
        formimg = UploadForm(request.POST, request.FILES)
        
        if formimg.is_valid():
            ## DELETE old picture
            img = Images.objects.filter(imguser_id=currUser)
            img.delete()
            
            ## INSERT IMAGE TO DB BLOB
            newimage = Images(avatar = request.FILES['avatar'],imguser_id=currUser)
            newimage.save()
            
            # Redirect to the document list after POST
            return redirect('/ERM/profile/')

    return redirect('/ERM/profile/')


'''

















def hash_password(password):
    # uuid is used to generate a random number
    salt = uuid.uuid4().hex
    return hashlib.sha256(salt.encode() + password.encode()).hexdigest() + ':' + salt
    
def check_password(hashed_password, user_password):
    password, salt = hashed_password.split(':')
    return password == hashlib.sha256(salt.encode() + user_password.encode()).hexdigest()

#************************************************************************#
#************************************************************************#
#************************************************************************#

def my_random_string(string_length=10):
    """Returns a random string of length string_length."""
    random = str(uuid.uuid4()) # Convert UUID format to a Python string.
    random = random.upper() # Make all characters uppercase.
    random = random.replace("-","") # Remove the UUID '-'.
    return random[0:string_length] # Return the random string.

#************************************************************************#
#************************************************************************#
#************************************************************************#
